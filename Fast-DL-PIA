#!/bin/bash
#
#World Wide Servers by ip
#wget -q  https://www.privateinternetaccess.com/pages/network/ -O - | grep -E -o '>[^.]+\.privateinternetaccess\.com<' | tr -d '[<>]' | while read host ;do host $host ;done | awk '{print $NF}' | sort -u | xargs sudo netselect -v -s 20
#
# Some Test File Locations
# http://support.smartdnsproxy.com/customer/portal/articles/1907772-vpn-server-locations-addresses
#
# U.S Servers by ip
#wget -q  https://www.privateinternetaccess.com/pages/network/ -O - | grep -E -o '>[^.]+\.privateinternetaccess\.com<' | tr -d '[<>]' | grep us- | while read host ;do host $host ;done | awk '{print $NF}' | sort -u | xargs sudo netselect -v -s 20

# tput is used to move the cursor and change colors
# This script is only verified with Ubuntu and distros based on Ubuntu
# sudo and apt are used to offer user to install an unmet dependancy that is package installable
# Outside of package manager Dependency "Netselect" Manual install
#----------------------------------------------------------------------------------------------------
tput sgr0 # Reset Terminal Colors
if command -v netselect >/dev/null 2>&1 ; then
    printf "%b\n"

else
clear
printf "%b\n\n"
tput setaf 1 # Red Text
printf "%b\n" "Netselect is required but not found. You can download it from"
tput sgr0 # Reset Terminal Colors

tput setaf 3 # Magenta Text
cat <<"EOF"

http://ftp.us.debian.org/debian/pool/main/n/netselect/
http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_i386.deb		i386
http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_arm64.deb		ARM64
http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_armhf.deb		ARMHF
http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_amd64.deb		AMD64

EOF

if command -v wget >/dev/null 2>&1 ; then
Downloader="wget"
elif
command -v curl >/dev/null 2>&1 ; then
Downloader="curl -O"
fi

tput sgr0 # Reset Terminal Colors
printf "%b\n" "Your Architecture (i386, x86_64, etc.) Is"
tput setaf 2 # Green Text
arch=$(dpkg --print-architecture);printf "%b\n\t"; tput blink; printf "%b\n" "${arch}"
tput sgr0 # Reset Terminal Colors
printf "%b\n"
tput sgr0 # Reset Terminal Colors
tput setaf 2 # Green Text
if [ "${arch}" = "arm64" ]; then
printf "%b\n\n" "Suggested Download is"
printf "%b\n" "http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_arm64.deb"
targetDL="http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_arm64.deb"
elif [ "${arch}" = "amd64" ]; then
printf "%b\n\n" "Suggested Download is"
printf "%b\n" "http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_amd64.deb"
targetDL="http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_amd64.deb"
elif [ "${arch}" = "i386" ]; then
printf "%b\n\n" "Suggested Download is"
printf "%b\n" "http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_i386.deb"
targetDL="http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_i386.deb"
elif [ "${arch}" = "armhf" ]; then
printf "%b\n\n" "Suggested Download is"
printf "%b\n" "http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_armhf.deb"
targetDL="http://ftp.us.debian.org/debian/pool/main/n/netselect/netselect_0.3.ds1-28+b1_armhf.deb"
else
printf "%b\n"
fi
tput setaf 3 # Yellow Text
printf "%b\n"

if [ -z "${targetDL}" ]
then
      printf "%b\n" "Cant Determine Your Architecture, Manual Download and Install "
      printf "%b\n"
tput sgr0 # Reset Terminal Colors
printf "%b\n" "After Download install with"
tput setaf 6 # Cyan Text
cat <<"EOF"

sudo dpkg -i netselect_0.3.ds1-28+b1_*.deb

EOF
      else
  read -r -n 1 -p "Would you like to attempt download and install now? [y/n] " response
tput sgr0 # Reset Terminal Colors
case "${response}" in
    [yY]) 
        "${Downloader}" "${targetDL}"
        sudo dpkg -i "$(basename "${targetDL}")"
        exec $(readlink -f "$0")
		;;
    *)
		printf "%b\n"
		exit
        ;;
esac    
fi








#cat <<"EOF"
#
#wget http://ftp.us.debian.org/debian/pool/main/n/netselect/*****Filename_Above********.deb
#
#or
#
#curl -O http://ftp.us.debian.org/debian/pool/main/n/netselect/*****Filename_Above********.deb
#
#EOF

tput sgr0 # Reset Terminal Colors
exit
fi
clear
tput cup 5 0
printf "%b\n" "Checking For Internet Access"
if ping -q -c 2 -W 1 google.com >/dev/null; then
  clear
else
clear
tput cup 5 0
printf "%b" "Network appears to be down. Unable to reach google.com for network connectivity test" "\n\n"
exit
fi

# Main script starts here


Banner() {
	tput setaf 2 # Green Text
cat <<"EOF"
  ____           _                   _                                    
 |  _ \   _ __  (_) __   __   __ _  | |_    ___                           
 | |_) | | '__| | | \ \ / /  / _` | | __|  / _ \                          
 |  __/  | |    | |  \ V /  | (_| | | |_  |  __/                          
 |_|_    |_|    |_|   \_/    \__,_|  \__|  \___|   _                      
 |_ _|  _ __   | |_    ___   _ __   _ __     ___  | |_                    
  | |  | '_ \  | __|  / _ \ | '__| | '_ \   / _ \ | __|                   
  | |  | | | | | |_  |  __/ | |    | | | | |  __/ | |_                    
 |___| |_| |_|  \__|  \___| |_|    |_| |_|  \___|  \__|                   
    / \      ___    ___    ___   ___   ___        ___    ___    _ __ ___  
   / _ \    / __|  / __|  / _ \ / __| / __|      / __|  / _ \  | '_ ` _ \ 
  / ___ \  | (__  | (__  |  __/ \__ \ \__ \  _  | (__  | (_) | | | | | | |
 /_/   \_\  \___|  \___|  \___| |___/ |___/ (_)  \___|  \___/  |_| |_| |_|
                                                                          
EOF
tput sgr0 # Reset Terminal Colors
printf "%b\n"

}
#------------------------------------------------------------------------------------------------------


#------------------------------------------------------------------------------------------------------
# if dependency and network check is confirmed. Banner function runs then Main_Menu 
# Select Either Speed Test Or PIA Server Check
function Main_Menu {
printf "%b\n"
tput cup 15 0 # Move cursor to line 15 column 0
tput ed # Clear all text below cursor

# Begin Print Main Menu Selections
	cat <<"EOF"

Select Option

1. Check For PIA's Fastest Server
2. Speed Test Your Current Connection Speed
3. Exit / Quit

EOF
# End Print Main Menu Selections

tput cup 22 0 # Move cursor to line 22 column 0
tput ed # Clear all text below cursor

read -n 1 option # Wait and read menu selection then continue with a single key press

case "${option}" in
    1) 
        PIA_Menu
        ;;
    2)
		Speed_Test
		;;
    3)
		tput cup 22 0
		tput ed
		exit
		;;
    *)
        tput cup 13 0
		tput ed
        Main_Menu
        ;;
esac

}

# Begin Function PIA Server Check. #1 from main menu
#------------------------------------------------------------------------------------------------------
Server_Check() {
tput cup 15 0 # Move cursor to line 15 column 0
tput ed # Delete text below cursor
printf "%b\n" " "
printf "%b" "Checking For PIA's Fastest Server...Please Wait." "\n\n"
# Checks ALL PIA Worldwide Servers
#------------------------------------------------------------------------------------------------------
if [ "${selection}" -eq 0 ]; then # Zero from PIA_Menu. All servers PIA has
tput setaf 3 # Yellow Text
printf "%b" "Checking All Servers Takes More Time....Be Patient" "\n" # warning that this worldwide server check takes longer
server=$(wget -q  https://www.privateinternetaccess.com/pages/network/ -O - | grep -E -o '>[^.]+\.privateinternetaccess\.com<' | tr -d '[<>]') # Gets ALL servers
serverCount=$(printf "%b\n" "${server}" | wc -l) # Counts the servers being selected
countries=$(printf "%b\n" "${server}" | cut -c 1-2 | uniq | wc -l) # Counts the countries PIA has servers in
tput setaf 2 # Green Text
printf "%b\n" "Checking "${serverCount}" Locations From "${countries}" Countries" # Prints the amount of worldwide servers and countries
tput sgr0 # Reset Terminal Colors
else
# Checks Selected PIA Servers
#------------------------------------------------------------------------------------------------------
server=$(wget -q  https://www.privateinternetaccess.com/pages/network/ -O - | grep -E -o '>[^.]+\.privateinternetaccess\.com<' | tr -d '[<>]' | grep "${LOCATION}") # Only check selected country
serverCount=$(printf "%b\n" "${server}" | wc -l) # Count the servers in selected country
printf "%b\n" "Checking "${serverCount}" Locations in Selected Country" # Print the number of server locations in selected country
fi

printf "%b\n" "${server}" # Prints the selected server locations
# Sudo Check
#-----------------------------------------------------------------
tput setaf 1 # Red Text
sudo -nv 2> /dev/null
if [ "${?}" -ne 0 ] ; then
printf "%b" "Netselect Requires Root Access To Run" "\n\n"
fi
#-----------------------------------------------------------------
printf "%b\n\n"
printf "%b\n" "${server}" | xargs sudo netselect -s 1 > file1 # Pipes each of the servers into Netselect and selects fastest
tput sgr0 # Reset Terminal Colors
tput cup 15 0 # Move cursor to line 15 column 0
tput ed # Delete text below cursor
printf "%b" "Fastest Hostname" "\n\n"
tput setaf 1 # Red Text
fhostname=$(cat file1 | awk '{print $2}') # Save fastest hostname
printf "%b\n" "${fhostname}"
printf "%b\n"
host "${fhostname}" > file2 # Pipe fastest hostname into the command 'host' to find all IP's for hostname'
IPs=$(cat file2 | awk '{print $4}') # Save IP addresses
cAddresses=$(wc -l file2 | awk '{print $1}') # Count IP addresses
printf "%b" "${fhostname}";tput setaf 3;printf "%b" " Has "${cAddresses}" Servers For That Hostname" "\n\n" # Print the number of IP addresses
tput sgr0
printf "%b" "Checking For The Fastest IP Address To "${fhostname}" " "\n"
printf "%b\n" "${IPs}" # Print IP addresses
tput setaf 2 # Green Text
FinalIP=$(printf "%b\n" "${IPs}" | xargs sudo netselect -s 1 | awk '{print $2}') # Pipe the saved IP's in Netselect and select fastest IP
tput setaf 3 # Yellow Text
resptime=$(ping -c 10 "${FinalIP}" | tail -1| awk -F '/' '{print $5 "ms"}') # Save the average ping time of the fastest IP
tput cup 22 0 # Move cursor to line 22 column 0
tput ed # Delete text below cursor
printf "%b\n"
printf "%b\n" "${FinalIP}" "Has an Avg Response Time Of "${resptime}"" # Print fastest IP and average ping time
printf "%b\n\n"
tput sgr0
rm file1 file2 # remove the temporary files
}

PIA_Menu() {
tput cup 22 0 # Move cursor to line 22 column 0
tput ed # Delete text below cursor
printf "%b\n" "Checking For VPN Connection"
ValuePIA=$(curl -m 10 -s https://www.privateinternetaccess.com/pages/whats-my-ip/ | grep -c "You are protected") #Check if already connected PIA

if (( "${ValuePIA}" > 0 ))
then
tput cup 15 0 # Move cursor to line 15 column 0
tput ed # Delete text below cursor
tput setaf 3 # Yellow Text
# Warning about slower ping times while being connected to PIA
printf "%b" "You are currently connected to PIA's VPN service.
More realistic results can be achived if you are not connected
to PIA for the \"Fastest Server Check\""
tput sgr0 # reset terminal colors
else
tput cup 15 0 # Move cursor to line 15 column 0
tput ed # Delete text below cursor
fi


# Print PIA country select
printf "%b\n"
cat <<"EOF"

Select Country

0. ALL SERVERS PIA OFFERS
1. USA
2. UK
3. Canada
4. Australia
5. New Zealand
6. Germany
7. Hong Kong
8. Japan
9. Israel

EOF
# read country selection and wait for a single key press
read -n 1 selection
case "${selection}" in

	0)
	LOCATION=""
	;;
	1)
	LOCATION="us-";;
	2)
	LOCATION="uk-";;
	3)
	LOCATION="ca-";;
	4)
	LOCATION="au-";;
	5)
	LOCATION="nz.";;
	6)
	LOCATION="de-";;
	7)
	LOCATION="hk.";;
	8)
	LOCATION="japan.";;
	9)
	LOCATION="israel";;
	*)
	clear
	Banner
	PIA_Menu
	tput cup 14 0
	tput ed
	;;
	esac
	Server_Check
}

function Speed_Test {
# Dependencies "wget"
if command -v curl >/dev/null 2>&1 ; then
tput cup 15 0
tput ed
    printf "%b\n"

else
tput cup 15 0
tput ed
tput setaf 1
printf "%b\n" "curl is required for Speed Testing but not found"
printf "%b\n"
tput sgr0
printf "%b\n" "Would you like to try to install it now?"
printf "%b\n"

read -r -n 1 -p "[y/N] " response
case "${response}" in
    [yY]) 
        sudo apt install curl
        exec $(readlink -f "$0")
		;;
    *)
        
		exec $(readlink -f "$0")
        ;;
esac

fi

if command -v bc >/dev/null 2>&1 ; then
tput cup 15 0
tput ed
printf "%b\n"

else

tput cup 15 0
tput ed
tput setaf 1
printf "%b\n" "bc is required for Speed Testing but not found"
printf "%b\n"
tput sgr0
printf "%b\n" "Would you like to try to install it now?"
printf "%b\n"

read -r -n 1 -p "[y/N] " response
case "${response}" in
    [yY]) 
        sudo apt install bc
        exec $(readlink -f "$0")
		;;
    *)
        
		exec $(readlink -f "$0")
        ;;
esac

fi


cat <<"EOF"

Select Download Size

1. 10  MB
2. 20  MB
3. 50  MB
4. 100 MB
5. 200 MB
6. 500 MB

EOF

	read -n 1 size
case "${size}" in
	1)
	FileSize="10"
	;;
	2)
	FileSize="20"
	;;
	3)
	FileSize="50"
	;;
	4)
	FileSize="100"
	;;
	5)
	FileSize="200"
	;;
	6)
	FileSize="500"
	;;
	*)
	Speed_Test;;
	esac
tput cup 26 0
tput ed
printf "%b" "Download "${FileSize}"MB File From?" "\n"

	cat <<"EOF"

1. USA
2. UK
3. Germany
4. Netherlands
5. Canada
6. Hong Kong
7. Italy
8. Japan
9. Australia
EOF

printf "%b\n\n"

	read -n 1 location
	case "${location}" in
	1)
	URL="http://mirror.sfo12.us.leaseweb.net/speedtest/1000mb.bin"
	LOC="USA"
	;;
	2)	
	URL="http://ipv4.download.thinkbroadband.com/512MB.zip"
	LOC="United Kingdom"
	;;
	3)	
	URL="https://speed.hetzner.de/1GB.bin"
	LOC="Germany"
	;;
	4)	
	URL="https://iperf.worldstream.nl/1000mb.bin"
	LOC="Netherlands"
	;;
	5)	
	URL="http://ca-mr2-smart.serverlocation.co:82/1Gio.dat"
	LOC="Canada"
	;;
	6)	
	URL="http://hk.serverlocation.co:82/1Gio.dat"
	LOC="Hong Kong"
	;;
	7)	
	URL="http://it-ml-smart.serverlocation.co:82/1Gio.dat"
	LOC="Italy"
	;;
	8)	
	URL="http://jp-tk-smart.serverlocation.co:82/1Gio.dat"
	LOC="Japan"
	;;
	9)	
	URL="http://au-sy.serverlocation.co:82/1Gio.dat"
	LOC="Australia"
	;;
	*)
	Speed_Test
	;;
	esac
tput cup 38 0
tput ed	
printf "%s\n" "Downloading "${FileSize}"MB's From ${LOC} "
tput cup 41 0
tput ed	
printf "%b\n" $(dirname "${URL}")
tput setaf 3
DLspeed=$(printf "%b" "scale=2; " && curl --progress-bar --connect-timeout 10 -o /dev/null -r 0-"${FileSize}"000000 "${URL}" -w "%{speed_download}"  | sed "s/\,/\./g" && echo "/1048576");
tput setaf 5
printf "%b\n" "${DLspeed}" | bc -q | sed "s/$/ MB\/sec/;s/^/\tDownload Speed\: /";
tput sgr0
printf "%b\n"

	read -n 1 -p " Press Any Key To Continue " continue
	case "${continue}" in
    *) 
     exec $(readlink -f "$0")
     ;;
     esac
}
Banner
Main_Menu
